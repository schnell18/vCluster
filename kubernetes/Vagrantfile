IMAGE_NAME = "debian10.3-min"
NODES = 4
EXTRA_DISKS = 2


Vagrant.configure("2") do |config|
    config.ssh.insert_key = false
    config.vm.box_check_update = false
    config.vm.synced_folder ".", "/work", automount: true

    # take care of /etc/hosts in both host and guest
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true

    config.vm.define "master" do |master|
        master.vm.box = IMAGE_NAME
        master.vm.network "private_network", ip: "192.168.50.10"
        master.vm.hostname = "master"
        master.vm.provision :hostmanager
        master.hostmanager.aliases = %w(master.kube.vn)

        master.vm.provider "virtualbox" do |v|
            v.name = "master"
            v.memory = 2048
            v.cpus = 2
            v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        end

        #  master.vm.provision "ansible" do |ansible|
        #      ansible.playbook = "provision/playbook-master.yml"
        #  end
    end

    (1..NODES).each do |i|
        node_id = "slave-#{i}"
        config.vm.define node_id do |slave|
            slave.vm.box = IMAGE_NAME
            slave.vm.network "private_network", ip: "192.168.50.#{i + 10}"
            slave.vm.hostname = node_id
            slave.vm.provision :hostmanager
            slave.hostmanager.aliases = "#{node_id}.kube.vn"

            vmdir = get_vm_disk_directory(node_id)

            slave.vm.provider "virtualbox" do |v|
                # vm name must be assigned w/ node id
                # otherwise, extra disks won't be created
                v.name = node_id
                v.memory = 2048
                v.cpus = 2
                v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]

                (1..EXTRA_DISKS).each do |j|
                    disk_file = File.join(vmdir, "disk#{j}-#{node_id}.vmdk")
                    unless File.exists?(disk_file)
                        v.customize [
                            "createmedium", "disk",
                            "--filename", disk_file,
                            "--format", "vmdk",
                            "--size", 1024 * 51
                        ]
                        v.customize [
                            "storageattach", :id,
                            "--storagectl", "SATA Controller",
                            "--port", j,
                            "--device", 0,
                            "--type", "hdd",
                            "--medium", disk_file
                        ]
                    end
                end
            end
        end
    end
end

def get_vm_disk_directory(vmname)
    path = %x(vboxmanage list systemproperties)
        .split(/\n/)
        .grep(/Default machine folder/)
        .first()
        .split(/:/)[1]
        .strip()
    vmdir = File.join(path, vmname)
    return vmdir
end

# vim:set nu ai expandtab sw=4 ts=4 syntax=ruby:
