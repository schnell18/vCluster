IMAGE_NAME = "generic/debian12"
IMAGE_VERSION = "4.3.10"
MASTERS = 1
SLAVES = 4
EXTRA_DISKS = 2


$script = <<-SCRIPT
sudo sed -i.bak \
    -e 's#deb.debian.org#mirror.sjtu.edu.cn#g' \
    -e 's#security.debian.org#mirror.sjtu.edu.cn#g' \
    /etc/apt/sources.list
sudo apt-get update
echo "Set default time zone to Asia/Shanghai..."
sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    sudo echo "Asia/Shanghai" > /etc/timezone
SCRIPT

Vagrant.configure("2") do |config|

    vagrant_provider = get_provider(ARGV)

    # switch to sjtu debian mirror
    config.vm.provision "shell", inline: $script

    config.ssh.insert_key = false
    config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_keys/vagrant.key.rsa"]
    config.vm.box_check_update = false
    if vagrant_provider == 'libvirt'
        config.vm.synced_folder ".", "/work",
            :type => :nfs,
            :mount_options => ['nolock,noatime,actimeo=1'],
            automount: true,
            nfs_udp: false, 
            SharedFoldersEnableSymlinksCreate: false
    else
        config.vm.synced_folder ".", "/work",
            automount: true,
            SharedFoldersEnableSymlinksCreate: false
    end

    # take care of /etc/hosts in both host and guest
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true

    (1..SLAVES + MASTERS).each do |i|
        node_id = i <= MASTERS ? "master" : "slave-#{i - MASTERS}"
        config.vm.define node_id do |node|
            node.vm.box = IMAGE_NAME
            node.vm.box_version = IMAGE_VERSION
            if vagrant_provider == 'libvirt'
                node.vm.network "private_network",
                    ip: "192.168.122.#{i + 9}",
                    :libvirt__network_name => "kubernetes",
                    :autostart => true
            else
                node.vm.network "private_network", ip: "192.168.56.#{i + 9}"
            end
            node.vm.hostname = node_id
            node.vm.provision :hostmanager
            node.hostmanager.aliases = "#{node_id}.kube.vn"
    
            node.vm.provider "libvirt" do |v|
                # the default pool is full
                # v.storage_pool_name = "home-pool"
                v.title = node_id
                v.description = "Kubernetes node: " + node_id
                v.memory = 2048
                v.cpus = 2
                if i > MASTERS
                    (1..EXTRA_DISKS).each do |j|
                        v.storage :file, :size => '30G'
                    end
                end
            end
    
            node.vm.provider "virtualbox" do |v|
                # vm name must be assigned w/ node id
                # otherwise, extra disks won't be created
                v.name = node_id
                v.memory = 2048
                v.cpus = 2
                v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
                if i > MASTERS
                    (1..EXTRA_DISKS).each do |j|
                        v.storage :file, :size => '30G'
                    end
                end
            end
    
            if i == MASTERS
                node.vm.provision "ansible" do |ansible|
                    ansible.playbook = "provision/playbook-master.yml"
                    ansible.config_file = "provision/ansible.cfg"
                    ansible.limit = "master"
                    ansible.extra_vars = {
                        hypervisor: vagrant_provider
                    }
                end
            end
            if i == SLAVES + MASTERS
                node.vm.provision "ansible" do |ansible|
                    ansible.playbook = "provision/playbook-node.yml"
                    ansible.config_file = "provision/ansible.cfg"
                    ansible.limit = "slave-*"
                    ansible.extra_vars = {
                        hypervisor: vagrant_provider
                    }
                end
            end
        end
    end
end

def get_provider_from_state()
  # fix here for multi-master cluster
  libvirt_dir = File.join(".vagrant", "machines",  "master", "libvirt")
  if File.exists?(libvirt_dir)
    return "libvirt"
  end
  for i in 1..SLAVES
    libvirt_dir = File.join(".vagrant", "machines",  "slave-#{i}", "libvirt")
    if File.exists?(libvirt_dir)
      return "libvirt"
    end
  end
  return nil
end

def get_provider_from_args(args)
  provider = nil
  for i in 0..args.length-1
    if args[i] == '--provider'
      provider = args[i+1]
      break
    elsif args[i].start_with?("--provider=")
      provider = args[i].split(/=/, 2)[1]
      break
    end
  end
  return provider || ENV['VAGRANT_DEFAULT_PROVIDER'] || "virtualbox"
end

def get_provider(args)
  return get_provider_from_state() || get_provider_from_args(args)
end

# vim:set nu ai expandtab sw=4 ts=4 syntax=ruby:
