---
# tasks file for kube-master

- name: Add an apt signing key for Kubernetes
  apt_key:
    data: "{{ lookup('file', 'k8s-apt-key.asc') }}"
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb {{ google_apt_mirror }} kubernetes-xenial main
    state: present
    filename: kubernetes

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet={{ kubernetes_version }}-00
      - kubeadm={{ kubernetes_version }}-00
      - kubectl={{ kubernetes_version }}-00

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    state: present
    create: yes
    line: KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --node-ip={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}
  notify:
    - Restart kubelet

- name: load meta images if absent
  shell: "{{ lookup('template', 'load-k8s-meta-images.sh') }}"
  args:
    executable: /bin/bash
  register: lbgn
  changed_when: "'Loaded k8s meta images' in lbgn.stdout"

# env ALL_PROXY=socks5://10.0.2.2:1080

- name: Test if cluster is already initialized
  stat:
    path: "{{ kube_conf_dir }}/admin.conf"
  register: astat
  tags: ["kubeadm"]
- name: Initialize the Kubernetes cluster using kubeadm
  shell: "{{ lookup('template', 'run-kubeadm-init.sh') }}"
  when: astat.stat.exists == False
  tags: ["kubeadm"]

#    --image-repository={{ kubernetes_gcr_repository }}

- name: Make sure /home/devel/.kube exists
  file:
    path: /home/devel/.kube
    state: directory
- name: Setup kubeconfig for devel user
  copy:
    src: /etc/kubernetes/admin.conf
    remote_src: yes
    owner: devel
    group: devel
    mode: 0640
    dest: /home/devel/.kube/config

- name: Make sure /root/.kube exists
  file:
    path: /root/.kube
    state: directory
- name: Setup kubeconfig for root user
  copy:
    src: /etc/kubernetes/admin.conf
    remote_src: yes
    owner: root
    group: root
    mode: 0640
    dest: /root/.kube/config

- name:  Create etcd client cert secrets for calico
  shell: "{{ lookup('template', 'create-calico-etcd-secret.sh') }}"
  args:
    executable: /bin/bash
  register: cbgn
  changed_when: "'Created etcd client cert secrets' in cbgn.stdout"

- name: Copy calico.yaml to remote
  copy:
    content: "{{ lookup('template', 'calico.yaml') }}"
    owner: root
    group: root
    mode: 0640
    dest: /tmp/calico.yaml

- name: Install calico pod network
  shell: "{{ lookup('template', 'create-calico-networking.sh') }}"
  args:
    executable: /bin/bash
  register: kbgn
  changed_when: "'Created calico networking' in kbgn.stdout"

- name: Generate join command
  command: kubeadm token create --print-join-command
  register: join_command
  changed_when: False
- name: Copy join command to local file
  copy:
    content: "{{ join_command.stdout_lines[0] }}"
    mode: 0755
    dest: "/work/.preload/join-command.sh"
  changed_when: False
