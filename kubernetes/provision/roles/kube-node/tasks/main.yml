---
# tasks file for kube-node

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Add an apt signing key for Kubernetes
  apt_key:
    data: "{{ lookup('file', 'k8s-apt-key.asc') }}"
    state: present

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb {{ google_apt_mirror }} kubernetes-xenial main
    # repo: deb https://apt.bbvk18.cf/ kubernetes-xenial main
    state: present
    filename: kubernetes
    update_cache: yes

- name: Install Kubernetes binaries
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - kubelet="{{ kubernetes_version }}-00"
      - kubeadm="{{ kubernetes_version }}-00"
      - kubectl="{{ kubernetes_version }}-00"

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    state: present
    create: yes
    line: KUBELET_EXTRA_ARGS=--node-ip={{ hostvars[inventory_hostname]['ansible_eth1']['ipv4']['address'] }}
  notify:
    - Restart kubelet

- meta: flush_handlers

- name: load meta images if absent
  shell: "{{ lookup('template', 'load-k8s-meta-images.sh') }}"
  args:
    executable: /bin/bash
  register: kbgn
  changed_when: "'Loaded k8s meta images' in kbgn.stdout"

# test existence of /etc/kubernetes/kubelet.conf to avoid repeated join
- name: test if node already joins cluster
  stat:
    path: "{{ kube_conf_dir }}/kubelet.conf"
  register: jstat
- name: Join the node to cluster
  command: sh /work/.preload/join-command.sh
  when: jstat.stat.exists == False

- name: Prepare partitions on additional disks
  shell: "{{ lookup('template', 'prepare-partitions.sh') }}"
  args:
    executable: /bin/bash
  register: clpp
  with_items: '{{ disk_additional_disks }}'
  changed_when: "'Prepared partitions' in clpp.stdout"
  tags: ['disk', 'partition']

# - name: Prepare partitions
#   block:
#     - name: Read device information
#       parted:
#         device: '{{ item.device }}'
#         unit: MiB
#       register: partition_info
# 
#     - name: "Create filesystem on disk"
#       filesystem:
#         dev: '{{ item.device }}'
#         fstype: '{{ item.fstype }}'
#         opts: '{{ item.fsopts|d(omit) }}'
# 
#     - name: "Ensure the mount directory exists"
#       file:
#         path: '{{ discovery_directory }}/{{ item.disk }}'
#         owner: '{{ item.user | default("root") }}'
#         group: '{{ item.group | default("root") }}'
#         state: directory
# 
#     - name: "Get UUID for partition"
#       command: blkid -s UUID -o value {{ item.device }}
#       register: disk_blkid
#       changed_when: False
# 
#     - name: "Mount partition"
#       mount:
#         path: '{{ discovery_directory }}/{{ item.0.disk }}'
#         fstype: '{{ item.0.fstype }}'
#         opts: '{{ item.0.mount_options|d(omit) }}'
#         passno: '0'
#         src: 'UUID={{ item.1.stdout }}'
#         state: 'mounted'
#       with_together:
#         - '{{ disk_additional_disks }}'
#         - '{{ disk_blkid.results }}'
#   with_items: '{{ disk_additional_disks }}'
#   tags: ['disk']
