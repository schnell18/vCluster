## Default values for Portus Helm Chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## Default values for Portus
##
portus:
  replicas: 1

  ## Image configuration.
  ##
  image:
    repository: "opensuse/portus"
    tag: "2.3"
    pullPolicy: "IfNotPresent"

  ## Service configuration.
  ##
  service:
    port: "3000"

  ## Resource configuration.
  ##
  resources:
    requests:
      memory: "128Mi"
      cpu: "300m"

  ## Portus database configuration.
  dbAdapter: "mysql2"

  ## only set db values if using existing database deployment
  ##
  # dbHost
  # dbDatabase:
  # dbUsername:
  # dbPassword:

  ## Defaults to a random 10-character alphanumeric string if not set
  ##
  password: portus

  ## Defaults to a random 10-character alphanumeric string if not set
  ## Password used for mariadb connection
  # productionPassword: not-a-secure-password

  ## Defaults to a random 128-character alphanumeric string if not set
  ##
  # secretKeyBase:

  env:
    ## http://port.us.org/docs/debugging.html
    ## The available log levels are: debug, info, warn, error, fatal and unknown
    log_level: info

  ## config
  ##
  config:
    email:
      from: "portus@example.com"
      name: "Portus"
      reply_to: "no-reply@example.com"
      smtp:
        enabled: false
        address: smtp.example.com
        port: 587
        domain: example.com
        username: username@example.com
        password: not-a-password
    gravatar: true  # If enabled, then the profile picture will be picked from the Gravatar
    delete: true  # Allow admins and owners to delete images and tags

    ## LDAP support. If enabled, then only users of the specified LDAP server will
    ## be able to use Portus. Take a look at the documentation of LDAP support in our
    ## online docs: http://port.us.org/features/2_LDAP-support.html.
    ldap:
      enabled: false
      url:
      port:

      # Available options: "plain", "simple_tls" and "starttls". The default is
      # "plain", the recommended is "starttls".
      method: plain
      # The base where users are located (e.g. "ou=users,dc=example,dc=com").
      base:
      # User filter (e.g. "mail=george*").
      filter:
      # The LDAP attribute where to search for username. The default is 'uid'.
      uid:
      # LDAP credentials used to search for a user.
      authentication:
        enabled: false
        bind_dn:
        password:

      # Portus needs an email for each user, but there's no standard way to get
      # that from LDAP servers. You can tell Portus how to get the email from users
      # registered in the LDAP server with this configurable value. There are three
      # possibilities:
      #
      #   - disabled: this is the default value. It means that Portus won't do a
      #     thing when registering LDAP users (users will be redirected to their
      #     profile page until they setup an email account).
      #   - enabled where "attr" is empty: for this you need "ldap.base" to have
      #     some value. In this case, the hostname will be guessed from the domain
      #     component of the provided base string. For example, for the dn:
      #     "ou=users,dc=example,dc=com", and a user name "user", the resulting
      #     email is "user@example.com".
      #   - enabled where "attr" is not empty: with this you specify the attribute
      #     inside a LDIF record where the email is set.
      #
      # If something goes wrong when trying to guess the email, then it just falls
      # back to the default behavior (empty email).
      guess_email:
        enabled: false
        attr:

    first_user_admin: true # First user signing up will be admin
    signup: true  # If enabled, then users can signup with the signup form
    display_name: false  # Allow users to have different display names on the web site
    user_permission:
      change_visibility: true  # Allow users to change the visibility or their personal namespace
      create_team: true # Allow users to create teams
      manage_team: true  # Allow users to create/modify teams if they are an owner of it
      create_namespace: true # Allow users to create namespaces
      manage_namespace: true  # Allow users to create/modify namespaces if they are an owner of it

    oauth:
      # If enabled, users can authenticate with their Google Account.
      # Callback url: <host>/users/auth/google_oauth2/callback
      google_oauth2:
        enabled: false
        id:
        secret:
        domain:
        options:
          hd:

      # OpenID authentication support. If enabled, then users can authenticate with OpenID/Connect
      # Callback url: <host>/users/auth/open_id/callback
      open_id:
        enabled: false
        identifier:
        domain:

      # Github authentication support.
      # Callback url: <host>/users/auth/github/callback
      github:
        enabled: false
        client_id:
        client_secret:
        organization:
        team:
        domain:

      # Gitlab authentication support.
      # Callback url: <host>/users/auth/gitlab/callback
      gitlab:
        enabled: false
        application_id:
        secret:
        group:
        domain:
        server:

      # Bitbucket authentication support. Need permission to read email.
      # Callback url: <host>/users/auth/bitbucket/callback
      bitbucket:
        enabled: false
        key:
        secret:
        domain:
        options:
          team:

    security:
      clair:
        server: "" # This is only guaranteed to work for v2.0.x releases of Clair
        health_port: 6061 # Port being used by Clair to report its status
      zypper:
        server: "" #  support for this is experimental since this functionality has not been merged into master yet in zypper-docker
    anonymous_browsing: true # Allow anonymous (non-logged-in) users to explore the images available in your Docker Registry

  ## TLS configuration
  ## the internal host names of the portus, registry and nginx service must be covered by the key/cert in order for TLS to work properly
  ##
  tls:
    enabled: true

    ## must include key if using tls
    ##
    key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpQIBAAKCAQEAvyq/q0MpbmwG07yxksOEq0vRQp1lEJovWkM22wOMHHYNvowF
        cHB48C+F+Ld5kWghBm0C29b98jeE+vi9A23O3oLlaT5v3/OxNT0wcDmC0Ps0308v
        6hfb6xtEFHcjtyeUHHUHT0jRO1RmC7+fraB6Li29utsMWzZ6LlWOT+j8S7kviN3I
        epanR7/vSD/+PYl5piZn9BvdGWpHiyTIwRIIgZBch/lE/eCM3YO+Es17CHXT1dMT
        nuOZVZGUGtGZf9tohfof/oJmRw03hwvU1vEn6lXj4PVC9Q4ulM8dNKTEykxHt1a7
        KHUbAq7aNNDSAr+Wctp429NWkJgf9gWHyoeBYwIDAQABAoIBAEl5f8Oug60aPiGB
        o+qZ1VMVR+/HmQGhkVOrA9l36pFB2pSDMs/9mq4ORfrLYiE+GXtjyLaAUoiXSDhC
        BDveJ6WkP9KMmelEu7aPtx9bK2lxM+gkgnECDJe3mhoXlJWf07CAVnflr+2Sycn4
        M8JDLNK05/h6mqwwKxPF9HXIQbhEYeE0tzYeUeU96biB5L0QKL2dPD98tQfWLzE+
        oCNRakPALA6Nvfw5q8GChd7ztF41iNamaEBc+vh8IWNWKVv+OQ9wIopSQpod+/8+
        PX7liWiL1ibRC3wHhxM6Sq8T7Teb/NBo755Y06PM8GWZODL89sYA49tONebTghRU
        kJkKOOkCgYEA14znPVeLPbWzj6jV8J1VM9s1c464XtYlt56w9mOwTmNmre8pd9nI
        2DevdYXS4wLU3kAQWLgNaR0s24IV68N3Pozl/7n/ijkGz00ciHZ0goV/K7RNEDOe
        6/0yG04uH/N+aE+KMIdiiGxTfwvy74WQsLRcV2Le0RbCobtHJ+daJ/8CgYEA4wp1
        uJvMRLvFI+jrD9y04RvKGi9+a5ual9Ydmoyat1TYrGJW1XcHDGUL3z7MRuu5TLOo
        f/z4PeKQgVrlE4ns26YdXVVdHUc1C3Rhdr7pnMjsUbkcKCzMVVXqNS4JU206JZFj
        oxQyRYtNuavvUQ1OLp1F0WzmpYUe/nroRyyzBp0CgYEArzRSyWOdRH2rBHyB2WCp
        XssxeUpqxntekRAmWz/QkQbu8TZTCJ43SLiKoAY00lz81eJQ5yxDiksyqQHl+4sY
        I/m3AdQXyCxuQpY1OR6/uU/1fHrDoQW0ibF2xwcXKtVqzDLK6oNBLg6PF9eIkfSJ
        FXilDkrJPj832Oo2/lJoz9UCgYEA0DAkOG7shU5k/IO1ICty1USFMzO/ye66eGaH
        aNNrf5bWxGO8Wiu2E+CIXWKZMKMwnCvV497UxvJ9LZBqpFsCDXuqS45ePt2vv1wt
        jxSK5RC82kdSkWhayhlpFPCs7oonGpHR+pUnb+vIDuyhGwKHYWknv10LtlV2UUXk
        vnc3hmUCgYEAg/hwN9ppnKJ2LiqLW7A1rX+tbrjFKFozrrNqGbmW5zQ4KziOYwmb
        g0MEWaRz196Yjdtw7JmXBcVVvd7k/B9jOqinTU7egRb7XxgkijosAeKVJQISSgqQ
        zFubdfKQKAGXtgghEJeqJuEEvNPgrcjgks3Y3HglGSQ5ncA9yD5LVMw=
        -----END RSA PRIVATE KEY-----

    ## must include certificate if using tls
    ##
    cert: |
        -----BEGIN CERTIFICATE-----
        MIIERzCCAy+gAwIBAgIUD+3jALigPbbdesbr/yMQNf9TsrwwDQYJKoZIhvcNAQEL
        BQAwajELMAkGA1UEBhMCQ04xETAPBgNVBAgTCFNoYW5naGFpMREwDwYDVQQHEwhT
        aGFuZ2hhaTETMBEGA1UEChMKS3ViZXJuZXRlczELMAkGA1UECxMCQ0ExEzARBgNV
        BAMTCkt1YmVybmV0ZXMwHhcNMTgwOTE5MTQzMjAwWhcNMTkwOTE5MTQzMjAwWjBw
        MQswCQYDVQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5n
        aGFpMRAwDgYDVQQKEwdrdWJlLnZuMQ8wDQYDVQQLEwZqamhvbWUxGDAWBgNVBAMT
        D3RyYWVmaWsua3ViZS52bjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
        AL8qv6tDKW5sBtO8sZLDhKtL0UKdZRCaL1pDNtsDjBx2Db6MBXBwePAvhfi3eZFo
        IQZtAtvW/fI3hPr4vQNtzt6C5Wk+b9/zsTU9MHA5gtD7NN9PL+oX2+sbRBR3I7cn
        lBx1B09I0TtUZgu/n62gei4tvbrbDFs2ei5Vjk/o/Eu5L4jdyHqWp0e/70g//j2J
        eaYmZ/Qb3RlqR4skyMESCIGQXIf5RP3gjN2DvhLNewh109XTE57jmVWRlBrRmX/b
        aIX6H/6CZkcNN4cL1NbxJ+pV4+D1QvUOLpTPHTSkxMpMR7dWuyh1GwKu2jTQ0gK/
        lnLaeNvTVpCYH/YFh8qHgWMCAwEAAaOB3jCB2zAOBgNVHQ8BAf8EBAMCBaAwHQYD
        VR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0O
        BBYEFMrkZuKLZxdFnuHiEnL5qOCgc3ZmMB8GA1UdIwQYMBaAFBwsIw5qLCUk3+0v
        aUegZLiopM6kMFwGA1UdEQRVMFOCD3RyYWVmaWsua3ViZS52boIJbTItcG9ydHVz
        ghJtMi1wb3J0dXMtcmVnaXN0cnmCD20yLXBvcnR1cy1uZ2lueIIQcmVnaXN0cnku
        a3ViZS52bjANBgkqhkiG9w0BAQsFAAOCAQEAMjmyqKDAVXi4o+N2mYLDci5rRQuO
        pkPT44LmcocZgNTXJlyRFeEWKSugrZt4Sk5QS5mLgh5Xp43X+8l9x0Vadg+Cbp9P
        dw/9ev+1xEsJKdUDLefNRIeGpgaVI8SviYJ9AR7l4XQZbnARXWm2uQ+yr6Tx1s52
        x4A3TW7WfUEhm6VSF2Vj8ghgXyU4X/uaYPetlCAIOF4beT250PnuddE+fMjw4Ptp
        QWizbSmijltX+WIqh6PIrE8biN3KifCEXWvuUK3kKEV2yClLiA2S7br8Si3S55Px
        vt9OE3c81W38x84dMZOYOSPfsluHKmVDG3+oxovrhR2lh/Ppr6g6i+mFbA==
        -----END CERTIFICATE-----

    ca: |
        -----BEGIN CERTIFICATE-----
        MIIDyDCCArCgAwIBAgIUWSEjYymr1Z6gniB2BtjNsO9prDUwDQYJKoZIhvcNAQEL
        BQAwajELMAkGA1UEBhMCQ04xETAPBgNVBAgTCFNoYW5naGFpMREwDwYDVQQHEwhT
        aGFuZ2hhaTETMBEGA1UEChMKS3ViZXJuZXRlczELMAkGA1UECxMCQ0ExEzARBgNV
        BAMTCkt1YmVybmV0ZXMwHhcNMTgwODI0MTM1NjAwWhcNMjMwODIzMTM1NjAwWjBq
        MQswCQYDVQQGEwJDTjERMA8GA1UECBMIU2hhbmdoYWkxETAPBgNVBAcTCFNoYW5n
        aGFpMRMwEQYDVQQKEwpLdWJlcm5ldGVzMQswCQYDVQQLEwJDQTETMBEGA1UEAxMK
        S3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM8L55iM
        sBs1MSDyJvxIN+z+aKkDIklCFA3dBjBdpt40jU9wPJK/DSHxdk7aaBJW9eyuKUNN
        n/osIwRZHehvZRf0M39W7KTUa1g1SERdwPQvrvDh8oWsdHxXF+hYFU/U1mAigkxt
        WlDL/msANFGvCO7j3GV17D4VEObY0+Vp9eGAqjBJVoSlBnevkyuOPKj1t8F7BCkC
        7Wps6wV91RzcHad/XYAoB3WrEgzbLIh23Mx58/WK63M7MSohaKpPCaWj8l7UrQWx
        7LdFTT8Y2vJ2oz5NGsJKZxJybjstHewen1NnO+Sm7S/NVefVUjblj+EeEkLo5vP3
        rfcdAUful5GKFFMCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQI
        MAYBAf8CAQIwHQYDVR0OBBYEFBwsIw5qLCUk3+0vaUegZLiopM6kMB8GA1UdIwQY
        MBaAFBwsIw5qLCUk3+0vaUegZLiopM6kMA0GCSqGSIb3DQEBCwUAA4IBAQCWtbTo
        Jc4iMtpqHjrJZWCnAFq5o6atCYnEp+mPjcSxT8tNfvxEQ8bxubFqrFCALTseEIX1
        VIrarZQbsI5D2C3VHYyaNF6BGkOw4djUiSEXOzlEiVH65O8S9ZN8UHEO5TdqJ+Ck
        VNcJ4hUT5LfqQiOJgx/oW/AHFA3M0p7lXtsGvamZvC0Xi6iuSIDChI+DMyBio/te
        FnziUDSQMkUeCNE34wrIcSvoTxa1EhprU6/ss2HpBt2Jc7MD+BQEfJ1rrnXCGBYc
        2l7Ll641q3/Ct5/OkNi2L4nlVD+GTV/Xr4+KpTFnPmIqBdYPYbLqV1O4zmijz3CB
        kKuhqpg0mtFsUR8q
        -----END CERTIFICATE-----

  ## background processing
  ##
  background:
    enabled: true
    resources:
      requests:
        memory: "128Mi"
        cpu: "300m"

## Default values for Docker Registry.
##
registry:
  replicas: 1
  mountPath: "/storage"

  ## persistence configuration.
  ##
  persistence:
    enabled: true
    accessMode: "ReadWriteOnce"
    size: "10Gi"

  ## image configuration.
  # #
  image:
    repository: "library/registry"
    tag: "2.5.2"
    pullPolicy: "IfNotPresent"

  ## Service configuration.
  ##
  service:
    port: "5000"
    debugPort: "5001"

  ## Resource configuration.
  ##
  resources:
    requests:
      memory: "128Mi"
      cpu: "300m"

## Default values for Nginx.
##
nginx:
  replicas: 1

  ## image configuration.
  ##
  image:
    repository: "library/nginx"
    tag: "alpine"
    pullPolicy: "IfNotPresent"

  ## Service configuration.
  ##
  service:
    ## Set to ClusterIP if using ingress, or NodePort if using minikube
    ##
    type: "ClusterIP"

    port: 443
    # nodePort:

    ## Annotation to be added to the service
    ##
    annotations:
    #   kubernetes.io/ingress.class: "nginx"

  ## in order to access the docker registry from outside of the cluster
  ## if ingress is enabled set host to the domain you are using
  ## if NodePort is being used set host to the ip address of a cluster node
  ##
  host: "registry.kube.vn"

  ## ingress configuration.
  ##
  ingress:
    enabled: true

    ## Anntations to be added to the web ingress
    ##
    annotations:
      kubernetes.io/ingress.class: "traefik"
      ingress.kubernetes.io/ssl-passthrough: "true"

    ## TLS configuration
    ## the ingress host must be covered by the key/cert in order for TLS to work properly
    ##
    tls:
      enabled: true

      ## Secrets containing SSL key and cert must be manually created in the namespace
      ##
      secretName: "traefik-cert"

  ## Resource configuration.
  ##
  resources:
    requests:
      memory: "128Mi"
      cpu: "300m"

## Default values for Mariadb.
##
mariadb:
  ## Use Mariadb chart dependency
  ## Set to false if using your own Mariadb
  ##
  enabled: true

  ## persistence configuration.
  ##
  persistence:
    enabled: false
    # storageClass: "-"
    accessMode: "ReadWriteOnce"
    size: "8Gi"

  ## Configuration values for Mariadb.
  ## must match Portus database values.
  ##
  mariadbUser: "portus"
  mariadbDatabase: "portus"

  master:
    runAsUser: 0
    fsGroup: 0
  slave:
    runAsUser: 0
    fsGroup: 0

  db:
    name: "portus"
    user: "portus"
    password: "portus"
