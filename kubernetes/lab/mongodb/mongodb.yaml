# pre-allocated persisten volume backed by NFS
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mongodb-pv0
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: kbm1.kube.vn
    path: /var/nfs/mongodb0
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mongodb-pv1
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: kbm1.kube.vn
    path: /var/nfs/mongodb1
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mongodb-pv2
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: kbm1.kube.vn
    path: /var/nfs/mongodb2

---
# configMap to hold mongo cluster management script
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
data:
  init.sh: |
      #!/bin/bash
      # Need to wait for the readiness health check to pass so that the
      # mongo names resolve. This is kind of wonky.
      until ping -c 1 ${HOSTNAME}.mongo; do
        echo "waiting for DNS (${HOSTNAME}.mongo)..."
        sleep 2
      done
      until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
        echo "connecting to local mongo..."
        sleep 2
      done
      echo "connected to local."
      HOST=mongo-0.mongo:27017
      until /usr/bin/mongo --host=${HOST} --eval 'printjson(db.serverStatus())'; do
        echo "connecting to remote mongo..."
        sleep 2
      done
      echo "connected to remote."
      if [[ "${HOSTNAME}" != 'mongo-0' ]]; then
        until /usr/bin/mongo --host=${HOST} --eval="printjson(rs.status())" \
            | grep -v "no replset config has been received"; do
            echo "waiting for replication set initialization"
            sleep 2
        done
        echo "adding self to mongo-0"
        /usr/bin/mongo --host=${HOST} --eval="printjson(rs.add('${HOSTNAME}.mongo'))"
      fi

      if [[ "${HOSTNAME}" == 'mongo-0' ]]; then
        echo "initializing replica set"
        /usr/bin/mongo --eval="printjson(rs.initiate(\
            {'_id': 'rs0', 'members': [{'_id': 0, \
             'host': 'mongo-0.mongo:27017'}]}))"
      fi
      echo "initialized"

      while true; do
        sleep 3600
      done

---
# stateful set to run mongodb
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  serviceName: "mongo"
  replicas: 3
  template:
    metadata:
      labels:
        app: mongo
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      - name: mongodb
        image: mongo:3.4.1
        command:
        - mongod
        - --replSet
        - rs0
        ports:
        - containerPort: 27017
          name: web
        volumeMounts:
        - name: nfs
          mountPath: /data/db
      # This container initializes the mongodb server, then sleeps.
      - name: init-mongo
        image: mongo:3.4.1
        command:
        - bash
        - /config/init.sh
        volumeMounts:
        - name: config
          mountPath: /config
      volumes:
      - name: config
        configMap:
          name: "mongo-init"
  volumeClaimTemplates:
  - metadata:
      name: nfs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi

---
# mongodb service
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
   - port: 27017
     name: peer
  clusterIP: None
  selector:
    app: mongo
